services:

  project-task-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: project-task-app
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET}
    ports:
      - "5050:5050"
    networks:
      - project-task-network
    depends_on:
      flyway:
        condition: service_completed_successfully
      redis:
        condition: service_healthy

  postgres:
    image: postgres:16-alpine
    container_name: db-project-task
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5051:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - project-task-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  flyway:
    image: flyway/flyway
    container_name: flyway-migrator
    environment:
      - FLYWAY_URL=jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      - FLYWAY_USER=${POSTGRES_USER}
      - FLYWAY_PASSWORD=${POSTGRES_PASSWORD}
    command: migrate
    volumes:
      - ./src/main/resources/db/migration:/flyway/sql
    networks:
      - project-task-network
    depends_on:
      postgres:
        condition: service_healthy


  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin-project-task
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    ports:
      - "5052:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - project-task-network
    depends_on:
      - postgres

  prometheus:
    image: prom/prometheus:v3.7.2
    container_name: prometheus
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - project-task-network
    ports:
      - 5053:9090

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 5054:3000
    networks:
      - project-task-network

  redis:
    image: redis:8.2.2
    container_name: redis-cache
    ports:
      - 5055:6379
    volumes:
      - redis_data:/data
    networks:
      - project-task-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  project-task-network:
    driver: bridge


volumes:
  postgres_data:
  pgadmin_data:
  prometheus_data:
  grafana_data:
  redis_data: